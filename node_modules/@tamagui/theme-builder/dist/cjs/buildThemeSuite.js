var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var buildThemeSuite_exports = {};
__export(buildThemeSuite_exports, {
  buildThemeSuite: () => buildThemeSuite
});
module.exports = __toCommonJS(buildThemeSuite_exports);
var import_create_theme = require("@tamagui/create-theme"), import_buildMask = require("./buildMask"), import_buildThemeSuitePalettes = require("./buildThemeSuitePalettes"), import_masks = require("./masks"), import_ThemeBuilder = require("./ThemeBuilder");
const basePaletteOffset = 5, namedTemplateSlots = {
  background: basePaletteOffset,
  subtleBackground: basePaletteOffset + 1,
  uiBackground: basePaletteOffset + 2,
  hoverUIBackround: basePaletteOffset + 3,
  activeUIBackround: basePaletteOffset + 4,
  subtleBorder: basePaletteOffset + 5,
  strongBorder: basePaletteOffset + 6,
  hoverBorder: basePaletteOffset + 7,
  strongBackground: basePaletteOffset + 8,
  hoverStrongBackground: basePaletteOffset + 9
};
function buildThemeSuite({ baseTheme, subThemes }) {
  const theme = baseTheme, maskThemes = (subThemes || []).filter(
    (x) => x.type === "mask"
  ), customMasks = Object.fromEntries(
    maskThemes.map((maskTheme) => [maskTheme.name, (0, import_buildMask.buildMask)(maskTheme.masks)])
  ), palettes = (0, import_buildThemeSuitePalettes.getThemeSuitePalettes)(theme), max = palettes.dark.length - 1, min = 1, componentMask = {
    ...import_masks.maskOptions.component,
    max,
    min,
    overrideSwap: {
      accentBackground: 0,
      accentColor: -0
    },
    overrideShift: {
      ...import_masks.maskOptions.component.override
    },
    skip: {
      ...import_masks.maskOptions.component.skip
    }
  }, customMaskOptions = {
    alt: {
      ...import_masks.maskOptions.alt,
      max,
      min,
      overrideSwap: {
        accentBackground: 0,
        accentColor: -0
      },
      overrideShift: {
        ...import_masks.maskOptions.alt.override
      },
      skip: {
        ...import_masks.maskOptions.alt.skip
      }
    },
    component: componentMask,
    componentInverse: {
      ...componentMask
    }
  }, baseTemplate = {
    accentBackground: 0,
    accentColor: -0,
    background0: 1,
    background025: 2,
    background05: 3,
    background075: 4,
    color0: -4,
    color025: -3,
    color05: -2,
    color075: -1,
    background: 5,
    backgroundHover: 6,
    backgroundPress: 7,
    backgroundFocus: 8,
    color: -5,
    colorHover: -6,
    colorPress: -5,
    colorFocus: -6,
    placeholderColor: -6,
    borderColor: 7,
    borderColorHover: 8,
    borderColorFocus: 9,
    borderColorPress: 8
  };
  function createTemplates() {
    const template = {
      color1: 5,
      color2: 6,
      color3: 7,
      color4: 8,
      color5: 9,
      color6: 10,
      color7: 11,
      color8: 12,
      color9: 13,
      color10: 14,
      color11: 15,
      color12: 16,
      ...baseTemplate
    };
    return {
      base: template,
      active: {
        ...template,
        background: namedTemplateSlots.strongBackground,
        backgroundHover: namedTemplateSlots.hoverStrongBackground,
        backgroundPress: namedTemplateSlots.hoverBorder,
        backgroundFocus: namedTemplateSlots.strongBackground
      },
      accentLight: template,
      accentDark: template
    };
  }
  const templates = createTemplates();
  function getComponentThemeDefinitions() {
    const overlayThemes = {
      light: {
        background: "rgba(0,0,0,0.5)"
      },
      dark: {
        background: "rgba(0,0,0,0.9)"
      }
    }, overlayThemeDefinitions = [
      {
        parent: "light",
        theme: overlayThemes.light
      },
      {
        parent: "dark",
        theme: overlayThemes.dark
      }
    ], componentTheme = [
      {
        parent: "light_accent",
        template: "active",
        palette: "lightAccent"
      },
      {
        parent: "dark_accent",
        template: "active",
        palette: "darkAccent"
      },
      {
        parent: "light",
        mask: "soften2",
        ...customMaskOptions.component
      },
      {
        parent: "dark",
        mask: "soften2",
        ...customMaskOptions.component
      }
    ];
    return {
      Card: {
        mask: "soften",
        ...customMaskOptions.component
      },
      Button: componentTheme,
      Checkbox: {
        mask: "softenBorder2",
        ...customMaskOptions.component
      },
      Switch: componentTheme,
      SwitchThumb: {
        mask: "inverse",
        ...customMaskOptions.componentInverse
      },
      TooltipContent: {
        mask: "soften2",
        ...customMaskOptions.component
      },
      DrawerFrame: {
        mask: "soften",
        ...customMaskOptions.component
      },
      Progress: {
        mask: "soften",
        ...customMaskOptions.component
      },
      RadioGroupItem: {
        mask: "softenBorder2",
        ...customMaskOptions.component
      },
      TooltipArrow: {
        mask: "soften",
        ...customMaskOptions.component
      },
      SliderTrackActive: {
        mask: "inverseSoften",
        ...customMaskOptions.component
      },
      SliderTrack: {
        mask: "soften2",
        ...customMaskOptions.component
      },
      SliderThumb: {
        mask: "inverse",
        ...customMaskOptions.componentInverse
      },
      Tooltip: {
        mask: "inverse",
        ...customMaskOptions.component
      },
      ProgressIndicator: {
        mask: "inverse",
        ...customMaskOptions.componentInverse
      },
      SheetOverlay: overlayThemeDefinitions,
      DialogOverlay: overlayThemeDefinitions,
      ModalOverlay: overlayThemeDefinitions,
      Input: {
        mask: "softenBorder2",
        ...customMaskOptions.component
      },
      TextArea: {
        mask: "softenBorder2",
        ...customMaskOptions.component
      }
    };
  }
  const built = (0, import_ThemeBuilder.createThemeBuilder)().addPalettes(palettes).addMasks({
    ...import_masks.masks,
    soften3Border2: (0, import_create_theme.createMask)((template, options) => {
      const softer2 = (0, import_create_theme.createSoftenMask)({ strength: 3 }).mask(template, options), softer1 = (0, import_create_theme.createSoftenMask)({ strength: 2 }).mask(template, options);
      return {
        ...softer2,
        borderColor: softer1.borderColor,
        borderColorHover: softer1.borderColorHover,
        borderColorPress: softer1.borderColorPress,
        borderColorFocus: softer1.borderColorFocus
      };
    }),
    ...customMasks
  }).addTemplates(templates).addThemes({
    light: {
      template: "base",
      palette: "light"
    },
    dark: {
      template: "base",
      palette: "dark"
    }
  }).addChildThemes(
    Object.fromEntries(
      maskThemes.map((theme2) => [
        theme2.name,
        {
          mask: theme2.name
        }
      ])
    )
  ).addChildThemes({
    // disabling as we don't need to preview these
    alt1: {
      mask: "soften2Border1",
      ...import_masks.maskOptions.alt
    },
    alt2: {
      mask: "soften3Border2",
      ...import_masks.maskOptions.alt
    }
  }).addChildThemes(
    palettes.lightAccent ? {
      accent: [
        {
          parent: "light",
          template: "base",
          palette: "lightAccent"
        },
        {
          parent: "dark",
          template: "base",
          palette: "darkAccent"
        }
      ]
    } : {}
  ).addChildThemes(getComponentThemeDefinitions()).build();
  return console.info("built themes", built), {
    built,
    palettes
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildThemeSuite
});
//# sourceMappingURL=buildThemeSuite.js.map
