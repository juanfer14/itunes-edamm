import { useIsomorphicLayoutEffect } from "@tamagui/constants";
import { getBoundingClientRect } from "../helpers/getBoundingClientRect";
import { getRect } from "../helpers/getRect";
const LayoutHandlers = /* @__PURE__ */ new WeakMap(), LayoutTimeouts = /* @__PURE__ */ new WeakMap();
let resizeObserver = null;
typeof window < "u" && "ResizeObserver" in window && (resizeObserver = new ResizeObserver((entries) => {
  for (const { target } of entries) {
    const onLayout = LayoutHandlers.get(target);
    if (typeof onLayout != "function")
      return;
    measureLayout(target, null, (x, y, width, height, left, top) => {
      onLayout({
        nativeEvent: {
          layout: { x, y, width, height, left, top },
          target
        },
        timeStamp: Date.now()
      });
    });
  }
}));
const measureLayout = (node, relativeTo, callback) => {
  const relativeNode = relativeTo || node?.parentNode;
  if (relativeNode instanceof HTMLElement) {
    clearTimeout(LayoutTimeouts.get(relativeNode));
    const tm = setTimeout(() => {
      const relativeRect = getBoundingClientRect(relativeNode), { height, left, top, width } = getRect(node), x = left - relativeRect.left, y = top - relativeRect.top;
      callback(x, y, width, height, left, top), LayoutTimeouts.delete(relativeNode);
    }, 0);
    LayoutTimeouts.set(relativeNode, tm);
  }
};
function useElementLayout(ref, onLayout) {
  useIsomorphicLayoutEffect(() => {
    if (!resizeObserver || !onLayout)
      return;
    const node = ref.current;
    if (node)
      return LayoutHandlers.set(node, onLayout), resizeObserver.observe(node), () => {
        resizeObserver?.unobserve(node);
      };
  }, [ref, onLayout]);
}
export {
  measureLayout,
  useElementLayout
};
//# sourceMappingURL=useElementLayout.js.map
