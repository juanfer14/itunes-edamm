{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setOffset } from \"../features/status/statusSlice\";\nimport { setTerm, setIsSongSelected } from \"../features/songs/songSlice\";\nimport Icon from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { Input } from '@rneui/themed';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function InputFetch() {\n  var dispatch = useDispatch();\n  var term = useSelector(function (state) {\n    return state.songs.termSearch;\n  });\n  var isDark = useSelector(function (state) {\n    return state.theme.isDark;\n  });\n  var inputRef = useRef(null);\n  var cambiarText = function cambiarText(text) {\n    dispatch(setOffset(0));\n    dispatch(setTerm(text));\n    dispatch(setIsSongSelected(false));\n  };\n  useEffect(function () {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n  return _jsx(Input, {\n    ref: inputRef,\n    placeholder: \"Ingrese el nombre del artista...\",\n    style: {\n      top: 50,\n      flex: 1,\n      fontSize: 25,\n      color: isDark ? 'white' : 'black'\n    },\n    containerStyle: {\n      height: 30,\n      bottom: 25\n    },\n    value: term,\n    onChangeText: cambiarText,\n    rightIcon: term ? _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return cambiarText('');\n      },\n      children: _jsx(Icon, {\n        name: \"close-circle-outline\",\n        size: 40,\n        color: \"gray\"\n      })\n    }) : null\n  });\n}\nexport default InputFetch;","map":{"version":3,"names":["React","useEffect","useRef","View","StyleSheet","TouchableOpacity","useSelector","useDispatch","setOffset","setTerm","setIsSongSelected","Icon","Input","jsx","_jsx","InputFetch","dispatch","term","state","songs","termSearch","isDark","theme","inputRef","cambiarText","text","current","focus","ref","placeholder","style","top","flex","fontSize","color","containerStyle","height","bottom","value","onChangeText","rightIcon","onPress","children","name","size"],"sources":["/Users/juanfer14/Public/itunes-edamm/components/InputFetch.jsx"],"sourcesContent":["// Importo componentes de react native\nimport React, { useEffect, useRef } from 'react'\nimport { View, StyleSheet, TouchableOpacity} from 'react-native';\n\n// Importo metodos del store y slices\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setOffset } from '../features/status/statusSlice'\nimport { setTerm, setIsSongSelected } from '../features/songs/songSlice';\n\n// Importo iconos\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n\n// Importo Input de react-native\nimport { Input } from '@rneui/themed';\n\nexport  function InputFetch(){\n\n    const dispatch = useDispatch();\n\n    // Termino a buscar\n    const term = useSelector(state => state.songs.termSearch)\n    const isDark = useSelector(state => state.theme.isDark);\n\n\n    const inputRef = useRef(null);\n\n    const cambiarText = (text) => {\n        dispatch(setOffset(0));\n        dispatch(setTerm(text));\n        dispatch(setIsSongSelected(false));\n    }\n\n    useEffect(() => {\n        if(inputRef.current){\n            inputRef.current.focus();\n        }\n    }, [])\n\n    return (\n        <Input\n            ref={inputRef}\n            placeholder='Ingrese el nombre del artista...'\n            style={{top: 50, flex: 1, fontSize: 25, color: isDark ? 'white' : 'black'}}\n            containerStyle={{height: 30, bottom: 25}}\n            value={term}\n            onChangeText={cambiarText}\n            rightIcon={\n                term ? \n                    <TouchableOpacity onPress={() => cambiarText('')} >\n                        <Icon name=\"close-circle-outline\" size={40} color=\"gray\" />\n                    </TouchableOpacity> \n                : null\n            }\n        />\n    )\n}\n\nexport default InputFetch;"],"mappings":"AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAIhD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS;AAClB,SAASC,OAAO,EAAEC,iBAAiB;AAGnC,OAAOC,IAAI;AAGX,SAASC,KAAK,QAAQ,eAAe;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEtC,OAAQ,SAASC,UAAUA,CAAA,EAAE;EAEzB,IAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAG9B,IAAMU,IAAI,GAAGX,WAAW,CAAC,UAAAY,KAAK;IAAA,OAAIA,KAAK,CAACC,KAAK,CAACC,UAAU;EAAA,EAAC;EACzD,IAAMC,MAAM,GAAGf,WAAW,CAAC,UAAAY,KAAK;IAAA,OAAIA,KAAK,CAACI,KAAK,CAACD,MAAM;EAAA,EAAC;EAGvD,IAAME,QAAQ,GAAGrB,MAAM,CAAC,IAAI,CAAC;EAE7B,IAAMsB,WAAW,GAAG,SAAdA,WAAWA,CAAIC,IAAI,EAAK;IAC1BT,QAAQ,CAACR,SAAS,CAAC,CAAC,CAAC,CAAC;IACtBQ,QAAQ,CAACP,OAAO,CAACgB,IAAI,CAAC,CAAC;IACvBT,QAAQ,CAACN,iBAAiB,CAAC,KAAK,CAAC,CAAC;EACtC,CAAC;EAEDT,SAAS,CAAC,YAAM;IACZ,IAAGsB,QAAQ,CAACG,OAAO,EAAC;MAChBH,QAAQ,CAACG,OAAO,CAACC,KAAK,CAAC,CAAC;IAC5B;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OACIb,IAAA,CAACF,KAAK;IACFgB,GAAG,EAAEL,QAAS;IACdM,WAAW,EAAC,kCAAkC;IAC9CC,KAAK,EAAE;MAACC,GAAG,EAAE,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAE,EAAE;MAAEC,KAAK,EAAEb,MAAM,GAAG,OAAO,GAAG;IAAO,CAAE;IAC3Ec,cAAc,EAAE;MAACC,MAAM,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAE,CAAE;IACzCC,KAAK,EAAErB,IAAK;IACZsB,YAAY,EAAEf,WAAY;IAC1BgB,SAAS,EACLvB,IAAI,GACAH,IAAA,CAACT,gBAAgB;MAACoC,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAMjB,WAAW,CAAC,EAAE,CAAC;MAAA,CAAC;MAAAkB,QAAA,EAC7C5B,IAAA,CAACH,IAAI;QAACgC,IAAI,EAAC,sBAAsB;QAACC,IAAI,EAAE,EAAG;QAACV,KAAK,EAAC;MAAM,CAAE;IAAC,CAC7C,CAAC,GACrB;EACL,CACJ,CAAC;AAEV;AAEA,eAAenB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}