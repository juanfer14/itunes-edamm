{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { StatusBar } from 'expo-status-bar';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavigationContainer, useNavigationContainerRef } from '@react-navigation/native';\nimport { lightTheme, darkTheme } from \"./features/styles/themes\";\nimport { Theme } from 'tamagui';\nimport { TabNavigator } from \"./TabNavigator\";\nimport { SongSelected } from \"./components/SongSelected\";\nimport { SongDetail } from \"./components/SongDetail\";\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport function Index() {\n  var theme = useSelector(function (state) {\n    return state.theme.actual;\n  });\n  var isSongSelected = useSelector(function (state) {\n    return state.songs.isSongSelected;\n  });\n  var isDark = theme === 'dark';\n  var colorStatus = isDark ? 'light' : 'dark';\n  var navigationRef = useNavigationContainerRef();\n  return _jsxs(SafeAreaProvider, {\n    children: [_jsx(NavigationContainer, {\n      ref: navigationRef,\n      theme: isDark ? darkTheme : lightTheme,\n      children: _jsx(Theme, {\n        name: theme,\n        children: _jsxs(View, {\n          style: {\n            flex: 1,\n            position: 'relative'\n          },\n          children: [_jsxs(Stack.Navigator, {\n            initialRouteName: \"TabNavigator\",\n            children: [_jsx(Stack.Screen, {\n              name: \"TabNavigator\",\n              component: TabNavigator,\n              options: {\n                headerShown: false\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"SongDetail\",\n              component: SongDetail,\n              options: {\n                headerShown: true,\n                headerTitle: 'Detalle'\n              }\n            })]\n          }), isSongSelected ? _jsx(SongSelected, {\n            navigation: navigationRef\n          }) : null]\n        })\n      })\n    }), _jsx(StatusBar, {\n      style: colorStatus\n    })]\n  });\n}\nexport default Index;","map":{"version":3,"names":["SafeAreaProvider","StatusBar","useSelector","useDispatch","NavigationContainer","useNavigationContainerRef","lightTheme","darkTheme","Theme","TabNavigator","SongSelected","SongDetail","createNativeStackNavigator","jsx","_jsx","jsxs","_jsxs","Stack","Index","theme","state","actual","isSongSelected","songs","isDark","colorStatus","navigationRef","children","ref","name","View","style","flex","position","Navigator","initialRouteName","Screen","component","options","headerShown","headerTitle","navigation"],"sources":["/Users/juanfer14/Public/itunes-edamm/Index.jsx"],"sourcesContent":["\nimport { View } from 'react-native';\n\n// Libreria para mantener el statusBar\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport { StatusBar } from 'expo-status-bar';\n\n// Obtengo del store, el valor de theme\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nimport { NavigationContainer, useNavigationContainerRef } from '@react-navigation/native';\n\n// Temas\nimport { lightTheme, darkTheme } from './features/styles/themes'\n\n\nimport { Theme } from 'tamagui'\n\n\nimport { TabNavigator } from './TabNavigator'\nimport { SongSelected } from './components/SongSelected';\nimport { SongDetail } from './components/SongDetail';\n\n/* \n * Stack de navegacion, para mostrar el detalle de la cancion\n */\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\n\n\nexport function Index() {\n\n\t// El tema que actualmente esta siendo utilizado de la store\n    const theme = useSelector(state => state.theme.actual);\n\tconst isSongSelected = useSelector(state => state.songs.isSongSelected)\n\n    // Termino para saber si esta en modo dark o no.\n    const isDark = theme === 'dark';\n    // Color que esta utilizando la barra de estado\n    const colorStatus = isDark ? 'light' : 'dark';\n\n\tconst navigationRef = useNavigationContainerRef(); // You can also use a regular ref with `React.useRef()`\n\n\t\n\n\treturn (\n\t<SafeAreaProvider>\n\t\t<NavigationContainer ref={navigationRef} theme={isDark ? darkTheme : lightTheme}>\n\n\t\t\t<Theme name={theme}>\n\t\t\t\t<View style={{flex:1, position: 'relative'}}>\n\t\t\t\t\t<Stack.Navigator initialRouteName='TabNavigator'>\n\t\t\t\t\t\t<Stack.Screen name=\"TabNavigator\" component={TabNavigator} options={{ headerShown: false }} />\n\t\t\t\t\t\t<Stack.Screen name=\"SongDetail\" component={SongDetail} options={{ headerShown: true, headerTitle: 'Detalle' }}/>\n\t\t\t\t\t</Stack.Navigator>\n\t\t\t\t\t{ isSongSelected ? \n\t\t\t\t\t\t<SongSelected navigation={navigationRef}/>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</View>\n\t\t\t</Theme>\n\t\t</NavigationContainer>\n\t\t<StatusBar style={colorStatus} />\t\n\t</SafeAreaProvider>        \n  );\n}\n\nexport default Index;"],"mappings":";AAIA,SAASA,gBAAgB,QAAQ,gCAAgC;AAEjE,SAASC,SAAS,QAAQ,iBAAiB;AAG3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAGtD,SAASC,mBAAmB,EAAEC,yBAAyB,QAAQ,0BAA0B;AAGzF,SAASC,UAAU,EAAEC,SAAS;AAG9B,SAASC,KAAK,QAAQ,SAAS;AAG/B,SAASC,YAAY;AACrB,SAASC,YAAY;AACrB,SAASC,UAAU;AAKnB,SAASC,0BAA0B,QAAQ,gCAAgC;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE5E,IAAMC,KAAK,GAAGL,0BAA0B,CAAC,CAAC;AAI1C,OAAO,SAASM,KAAKA,CAAA,EAAG;EAGpB,IAAMC,KAAK,GAAGjB,WAAW,CAAC,UAAAkB,KAAK;IAAA,OAAIA,KAAK,CAACD,KAAK,CAACE,MAAM;EAAA,EAAC;EACzD,IAAMC,cAAc,GAAGpB,WAAW,CAAC,UAAAkB,KAAK;IAAA,OAAIA,KAAK,CAACG,KAAK,CAACD,cAAc;EAAA,EAAC;EAGpE,IAAME,MAAM,GAAGL,KAAK,KAAK,MAAM;EAE/B,IAAMM,WAAW,GAAGD,MAAM,GAAG,OAAO,GAAG,MAAM;EAEhD,IAAME,aAAa,GAAGrB,yBAAyB,CAAC,CAAC;EAIjD,OACAW,KAAA,CAAChB,gBAAgB;IAAA2B,QAAA,GAChBb,IAAA,CAACV,mBAAmB;MAACwB,GAAG,EAAEF,aAAc;MAACP,KAAK,EAAEK,MAAM,GAAGjB,SAAS,GAAGD,UAAW;MAAAqB,QAAA,EAE/Eb,IAAA,CAACN,KAAK;QAACqB,IAAI,EAAEV,KAAM;QAAAQ,QAAA,EAClBX,KAAA,CAACc,IAAI;UAACC,KAAK,EAAE;YAACC,IAAI,EAAC,CAAC;YAAEC,QAAQ,EAAE;UAAU,CAAE;UAAAN,QAAA,GAC3CX,KAAA,CAACC,KAAK,CAACiB,SAAS;YAACC,gBAAgB,EAAC,cAAc;YAAAR,QAAA,GAC/Cb,IAAA,CAACG,KAAK,CAACmB,MAAM;cAACP,IAAI,EAAC,cAAc;cAACQ,SAAS,EAAE5B,YAAa;cAAC6B,OAAO,EAAE;gBAAEC,WAAW,EAAE;cAAM;YAAE,CAAE,CAAC,EAC9FzB,IAAA,CAACG,KAAK,CAACmB,MAAM;cAACP,IAAI,EAAC,YAAY;cAACQ,SAAS,EAAE1B,UAAW;cAAC2B,OAAO,EAAE;gBAAEC,WAAW,EAAE,IAAI;gBAAEC,WAAW,EAAE;cAAU;YAAE,CAAC,CAAC;UAAA,CAChG,CAAC,EAChBlB,cAAc,GACfR,IAAA,CAACJ,YAAY;YAAC+B,UAAU,EAAEf;UAAc,CAAC,CAAC,GACxC,IAAI;QAAA,CAEF;MAAC,CACD;IAAC,CACY,CAAC,EACtBZ,IAAA,CAACb,SAAS;MAAC8B,KAAK,EAAEN;IAAY,CAAE,CAAC;EAAA,CAChB,CAAC;AAEpB;AAEA,eAAeP,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}